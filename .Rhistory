<<<<<<< HEAD
richness_QDS = GCFR_richness_QDS,
feature_column = "species",
debug_length = 10
)
calc_all_pw_jaccard <- function(trimmed_points = NULL,
communities_by_cell = NULL,
richness_QDS,
feature_column = c("species", "genus", "family"),
cell_nos = NULL,
debug_length = NULL,
quiet = FALSE) {
stopifnot(class(richness_QDS) == "RasterLayer")
if (!is.null(debug_length) & !is.null(trimmed_points)) {
if (!quiet) {
cat(sep = "",
"DEBUG MODE (running for only ",
debug_length,
"cells)\n"
)
}
cell_nos <- levels(as.factor(trimmed_points$cell_nos))
cell_nos <- cell_nos[1:debug_length]
if (!quiet) {
cat(sep = "",
"All ", length(cell_nos), " cell nos. extracted\n"
)
}
} else if (is.null(cell_nos)) {
stop("Please manually provide cell_nos\r")
}
# Compile list of species in each grid-cell --------------------------------
if (is.null(communities_by_cell) & !is.null(trimmed_points)) {
communities_by_cell <- compile_communities_by_cell(
trimmed_points,
feature_column,
cell_nos = cell_nos,
quiet = quiet
)
} else if (!is.null(communities_by_cell) & is.null(trimmed_points)) {
if (!quiet) {
cat(sep = "",
"Communities pre-described for all ",
length(cell_nos), "cells\n",
"Accepting input communities_by_cell\n"
)
}
}
# Calculate species turnover between cells ---------------------------------
turnovers_betw_cells <-
matrix(nrow = length(cell_nos), ncol = length(cell_nos))
rownames(turnovers_betw_cells) <- paste0("cell_", cell_nos)
colnames(turnovers_betw_cells) <- paste0("cell_", cell_nos)
for (i in seq_along(cell_nos)) {
for (j in seq_along(cell_nos)) {
turnovers_betw_cells[i, j] <-
if (names(communities_by_cell)[[i]] ==
names(communities_by_cell)[[j]]) {
0
} else {
jaccard_distance(
communities_by_cell[[i]],
communities_by_cell[[j]]
)
}
}
if (!quiet) {
flush.console()
cat(sep = "",
"Calculated Jaccard distances relative to cell no. ",
cell_nos[[i]], " (", i, "/", length(cell_nos), ")\r"
)
}
}
if (!quiet) {
cat(sep = "",
"Calculated all ",
length(cell_nos),
"pairwise Jaccard distances\n"
)
}
# Calculate geographical distances between all cell pairs ------------------
geodists_betw_cells <- pointDistance(
p1 = xyFromCell(richness_QDS, cell = as.numeric(cell_nos)),
p2 = xyFromCell(richness_QDS, cell = as.numeric(cell_nos)),
lonlat = TRUE,
allpairs = TRUE
)
if (!quiet) {
cat(sep = "",
"Calculated all ",
length(geodists_betw_cells),
"pairwise geographic distances\n"
)
}
turnovers_betw_cells_df <- as_tibble(turnovers_betw_cells)
turnovers_betw_cells_df$cell_no_a <- colnames(turnovers_betw_cells)
turnovers_betw_cells_df %<>% gather(
cell_no_b, turnover,
-cell_no_a
)
geodists_betw_cells_df <- as_tibble(geodists_betw_cells)
colnames(geodists_betw_cells_df) <- colnames(turnovers_betw_cells)
geodists_betw_cells_df$cell_no_a <- colnames(turnovers_betw_cells)
geodists_betw_cells_df %<>% gather(
cell_no_b, geodist,
-cell_no_a
)
turnover_and_geodist_betw_cells_df <- full_join(
turnovers_betw_cells_df,
geodists_betw_cells_df
)
if (!quiet) {
cat("Done")
}
return(turnover_and_geodist_betw_cells_df)
}
calc_all_pw_jaccard(
trimmed_GCFR_clean_flora_spdf_family,
richness_QDS = GCFR_richness_QDS,
feature_column = "species",
debug_length = 10
)
calc_all_pw_jaccard <- function(trimmed_points = NULL,
communities_by_cell = NULL,
richness_QDS,
feature_column = c("species", "genus", "family"),
cell_nos = NULL,
debug_length = NULL,
quiet = FALSE) {
stopifnot(class(richness_QDS) == "RasterLayer")
if (!is.null(debug_length) & !is.null(trimmed_points)) {
if (!quiet) {
cat(sep = "",
"DEBUG MODE (running for only ",
debug_length,
" cells)\n"
)
}
cell_nos <- levels(as.factor(trimmed_points$cell_nos))
cell_nos <- cell_nos[1:debug_length]
if (!quiet) {
cat(sep = "",
"All ", length(cell_nos), " cell nos. extracted\n"
)
}
} else if (is.null(cell_nos)) {
stop("Please manually provide cell_nos\r")
}
# Compile list of species in each grid-cell --------------------------------
if (is.null(communities_by_cell) & !is.null(trimmed_points)) {
communities_by_cell <- compile_communities_by_cell(
trimmed_points,
feature_column,
cell_nos = cell_nos,
quiet = quiet
)
} else if (!is.null(communities_by_cell) & is.null(trimmed_points)) {
if (!quiet) {
cat(sep = "",
"Communities pre-described for all ",
length(cell_nos), "cells\n",
"Accepting input communities_by_cell\n"
)
}
}
# Calculate species turnover between cells ---------------------------------
turnovers_betw_cells <-
matrix(nrow = length(cell_nos), ncol = length(cell_nos))
rownames(turnovers_betw_cells) <- paste0("cell_", cell_nos)
colnames(turnovers_betw_cells) <- paste0("cell_", cell_nos)
for (i in seq_along(cell_nos)) {
for (j in seq_along(cell_nos)) {
turnovers_betw_cells[i, j] <-
if (names(communities_by_cell)[[i]] ==
names(communities_by_cell)[[j]]) {
0
} else {
jaccard_distance(
communities_by_cell[[i]],
communities_by_cell[[j]]
)
}
}
if (!quiet) {
flush.console()
cat(sep = "",
"Calculated Jaccard distances relative to cell no. ",
cell_nos[[i]], " (", i, "/", length(cell_nos), ")\r"
)
}
}
if (!quiet) {
cat(sep = "",
"Calculated all ",
length(cell_nos),
"pairwise Jaccard distances\n"
)
}
# Calculate geographical distances between all cell pairs ------------------
geodists_betw_cells <- pointDistance(
p1 = xyFromCell(richness_QDS, cell = as.numeric(cell_nos)),
p2 = xyFromCell(richness_QDS, cell = as.numeric(cell_nos)),
lonlat = TRUE,
allpairs = TRUE
)
if (!quiet) {
cat(sep = "",
"Calculated all ",
length(geodists_betw_cells),
"pairwise geographic distances\n"
)
}
turnovers_betw_cells_df <- as_tibble(turnovers_betw_cells)
turnovers_betw_cells_df$cell_no_a <- colnames(turnovers_betw_cells)
turnovers_betw_cells_df %<>% gather(
cell_no_b, turnover,
-cell_no_a
)
geodists_betw_cells_df <- as_tibble(geodists_betw_cells)
colnames(geodists_betw_cells_df) <- colnames(turnovers_betw_cells)
geodists_betw_cells_df$cell_no_a <- colnames(turnovers_betw_cells)
geodists_betw_cells_df %<>% gather(
cell_no_b, geodist,
-cell_no_a
)
turnover_and_geodist_betw_cells_df <- full_join(
turnovers_betw_cells_df,
geodists_betw_cells_df
)
if (!quiet) {
cat("Done")
}
return(turnover_and_geodist_betw_cells_df)
}
calc_all_pw_jaccard(
trimmed_GCFR_clean_flora_spdf_family,
richness_QDS = GCFR_richness_QDS,
feature_column = "species",
debug_length = 10
)
source('~/Cape-vs-SWA/functions/compile_communities_by_cell.R', echo=TRUE)
source('~/Cape-vs-SWA/functions/calc_all_pw_jaccard.R', echo=TRUE)
calc_all_pw_jaccard(
trimmed_GCFR_clean_flora_spdf_family,
richness_QDS = GCFR_richness_QDS,
feature_column = "species",
debug_length = 10
)
calc_all_pw_jaccard <- function(trimmed_points = NULL,
communities_by_cell = NULL,
richness_QDS,
feature_column = c("species", "genus", "family"),
cell_nos = NULL,
debug_length = NULL,
quiet = FALSE) {
stopifnot(class(richness_QDS) == "RasterLayer")
if (!is.null(cell_nos)) {
cell_nos <- levels(as.factor(trimmed_points$cell_nos))
if (!quiet) {
cat(sep = "",
"All ", length(cell_nos), " cell nos. extracted\n"
)
}
} else {
stop("Please manually provide cell_nos\r")
}
if (!is.null(debug_length) & !is.null(trimmed_points)) {
if (!quiet) {
cat(sep = "",
"DEBUG MODE (running for only ",
debug_length,
" cells)\n"
)
}
cell_nos <- cell_nos[1:debug_length]
if (!quiet) {
cat(sep = "",
"All ", length(cell_nos), " cell nos. extracted\n"
)
}
}
# Compile list of species in each grid-cell --------------------------------
if (is.null(communities_by_cell) & !is.null(trimmed_points)) {
communities_by_cell <- compile_communities_by_cell(
trimmed_points,
feature_column,
cell_nos = cell_nos,
quiet = quiet
)
} else if (!is.null(communities_by_cell) & is.null(trimmed_points)) {
if (!quiet) {
cat(sep = "",
"Communities pre-described for all ",
length(cell_nos), "cells\n",
"Accepting input communities_by_cell\n"
)
}
}
# Calculate species turnover between cells ---------------------------------
turnovers_betw_cells <-
matrix(nrow = length(cell_nos), ncol = length(cell_nos))
rownames(turnovers_betw_cells) <- paste0("cell_", cell_nos)
colnames(turnovers_betw_cells) <- paste0("cell_", cell_nos)
for (i in seq_along(cell_nos)) {
for (j in seq_along(cell_nos)) {
turnovers_betw_cells[i, j] <-
if (names(communities_by_cell)[[i]] ==
names(communities_by_cell)[[j]]) {
0
} else {
jaccard_distance(
communities_by_cell[[i]],
communities_by_cell[[j]]
)
}
}
if (!quiet) {
flush.console()
cat(sep = "",
"Calculated Jaccard distances relative to cell no. ",
cell_nos[[i]], " (", i, "/", length(cell_nos), ")\r"
)
}
}
if (!quiet) {
cat(sep = "",
"Calculated all ",
length(cell_nos),
"pairwise Jaccard distances\n"
)
}
# Calculate geographical distances between all cell pairs ------------------
geodists_betw_cells <- pointDistance(
p1 = xyFromCell(richness_QDS, cell = as.numeric(cell_nos)),
p2 = xyFromCell(richness_QDS, cell = as.numeric(cell_nos)),
lonlat = TRUE,
allpairs = TRUE
)
if (!quiet) {
cat(sep = "",
"Calculated all ",
length(geodists_betw_cells),
"pairwise geographic distances\n"
)
}
turnovers_betw_cells_df <- as_tibble(turnovers_betw_cells)
turnovers_betw_cells_df$cell_no_a <- colnames(turnovers_betw_cells)
turnovers_betw_cells_df %<>% gather(
cell_no_b, turnover,
-cell_no_a
)
geodists_betw_cells_df <- as_tibble(geodists_betw_cells)
colnames(geodists_betw_cells_df) <- colnames(turnovers_betw_cells)
geodists_betw_cells_df$cell_no_a <- colnames(turnovers_betw_cells)
geodists_betw_cells_df %<>% gather(
cell_no_b, geodist,
-cell_no_a
)
turnover_and_geodist_betw_cells_df <- full_join(
turnovers_betw_cells_df,
geodists_betw_cells_df
)
if (!quiet) {
cat("Done")
}
return(turnover_and_geodist_betw_cells_df)
}
calc_all_pw_jaccard(
trimmed_GCFR_clean_flora_spdf_family,
richness_QDS = GCFR_richness_QDS,
feature_column = "species",
debug_length = 10
)
calc_all_pw_jaccard <- function(trimmed_points = NULL,
communities_by_cell = NULL,
richness_QDS,
feature_column = c("species", "genus", "family"),
cell_nos = NULL,
debug_length = NULL,
quiet = FALSE) {
stopifnot(class(richness_QDS) == "RasterLayer")
if (!is.null(cell_nos)) {
cell_nos <- levels(as.factor(trimmed_points$cell_nos))
if (!quiet) {
cat(sep = "",
"All ", length(cell_nos), " cell nos. extracted\n"
)
}
} else if (!is.null(debug_length) & !is.null(trimmed_points)) {
if (!quiet) {
cat(sep = "",
"DEBUG MODE (running for only ",
debug_length,
" cells)\n"
)
}
cell_nos <- cell_nos[1:debug_length]
if (!quiet) {
cat(sep = "",
"All ", length(cell_nos), " cell nos. extracted\n"
)
}
} else {
stop("Please manually provide cell_nos\r")
}
# Compile list of species in each grid-cell --------------------------------
if (is.null(communities_by_cell) & !is.null(trimmed_points)) {
communities_by_cell <- compile_communities_by_cell(
trimmed_points,
feature_column,
cell_nos = cell_nos,
quiet = quiet
)
} else if (!is.null(communities_by_cell) & is.null(trimmed_points)) {
if (!quiet) {
cat(sep = "",
"Communities pre-described for all ",
length(cell_nos), "cells\n",
"Accepting input communities_by_cell\n"
)
}
}
# Calculate species turnover between cells ---------------------------------
turnovers_betw_cells <-
matrix(nrow = length(cell_nos), ncol = length(cell_nos))
rownames(turnovers_betw_cells) <- paste0("cell_", cell_nos)
colnames(turnovers_betw_cells) <- paste0("cell_", cell_nos)
for (i in seq_along(cell_nos)) {
for (j in seq_along(cell_nos)) {
turnovers_betw_cells[i, j] <-
if (names(communities_by_cell)[[i]] ==
names(communities_by_cell)[[j]]) {
0
} else {
jaccard_distance(
communities_by_cell[[i]],
communities_by_cell[[j]]
)
}
}
if (!quiet) {
flush.console()
cat(sep = "",
"Calculated Jaccard distances relative to cell no. ",
cell_nos[[i]], " (", i, "/", length(cell_nos), ")\r"
)
}
}
if (!quiet) {
cat(sep = "",
"Calculated all ",
length(cell_nos),
"pairwise Jaccard distances\n"
)
}
# Calculate geographical distances between all cell pairs ------------------
geodists_betw_cells <- pointDistance(
p1 = xyFromCell(richness_QDS, cell = as.numeric(cell_nos)),
p2 = xyFromCell(richness_QDS, cell = as.numeric(cell_nos)),
lonlat = TRUE,
allpairs = TRUE
)
if (!quiet) {
cat(sep = "",
"Calculated all ",
length(geodists_betw_cells),
"pairwise geographic distances\n"
)
}
turnovers_betw_cells_df <- as_tibble(turnovers_betw_cells)
turnovers_betw_cells_df$cell_no_a <- colnames(turnovers_betw_cells)
turnovers_betw_cells_df %<>% gather(
cell_no_b, turnover,
-cell_no_a
)
geodists_betw_cells_df <- as_tibble(geodists_betw_cells)
colnames(geodists_betw_cells_df) <- colnames(turnovers_betw_cells)
geodists_betw_cells_df$cell_no_a <- colnames(turnovers_betw_cells)
geodists_betw_cells_df %<>% gather(
cell_no_b, geodist,
-cell_no_a
)
turnover_and_geodist_betw_cells_df <- full_join(
turnovers_betw_cells_df,
geodists_betw_cells_df
)
if (!quiet) {
cat("Done")
}
return(turnover_and_geodist_betw_cells_df)
}
calc_all_pw_jaccard(
trimmed_GCFR_clean_flora_spdf_family,
richness_QDS = GCFR_richness_QDS,
feature_column = "species",
debug_length = 10
)
source('~/Cape-vs-SWA/functions/compile_communities_by_cell.R', echo=TRUE)
source('~/Cape-vs-SWA/functions/calc_all_pw_jaccard.R', echo=TRUE)
calc_all_pw_jaccard(
trimmed_GCFR_clean_flora_spdf_family,
richness_QDS = GCFR_richness_QDS,
feature_column = "species",
debug_length = 10
)
source('~/Cape-vs-SWA/functions/calc_all_pw_jaccard.R', echo=TRUE)
calc_all_pw_jaccard(
trimmed_GCFR_clean_flora_spdf_family,
richness_QDS = GCFR_richness_QDS,
feature_column = "species",
debug_length = 10
=======
"cell_",
levels(as.factor(cells$HDS_cell_no[cells$region == "SWAFR"]))
),
SWAFR_gamma_beta_alpha_HDS_family
)
)
gamma_beta_alpha_HDS <- rbind(
cbind(gamma_beta_alpha_HDS_species, rank = "species"),
cbind(gamma_beta_alpha_HDS_genus,   rank = "genus"),
cbind(gamma_beta_alpha_HDS_family,  rank = "family")
)
# Save to disc
write_csv(
gamma_beta_alpha_HDS,
here::here("analyses/06_outputs/gamma_beta_alpha_HDS.csv")
)
# Tidy up
rm(
GCFR_gamma_beta_alpha_HDS_species,
GCFR_gamma_beta_alpha_HDS_genus,
GCFR_gamma_beta_alpha_HDS_family,
SWAFR_gamma_beta_alpha_HDS_species,
SWAFR_gamma_beta_alpha_HDS_genus,
SWAFR_gamma_beta_alpha_HDS_family,
gamma_beta_alpha_HDS_species,
gamma_beta_alpha_HDS_genus,
gamma_beta_alpha_HDS_family
)
# 3DS richness ~ mean QDS richness * mean QDS turnover -------------------------
# Compile data:
# GCFR
GCFR_gamma_beta_alpha_3QDS_species <- compile_gamma_beta_alpha(
cells,
communities_by_cell_QDS$GCFR$species,
region = "GCFR",
focal_scale = "threeQDS"
)
GCFR_gamma_beta_alpha_3QDS_genus <- compile_gamma_beta_alpha(
cells,
communities_by_cell_QDS$GCFR$genus,
region = "GCFR",
focal_scale = "threeQDS"
)
GCFR_gamma_beta_alpha_3QDS_family <- compile_gamma_beta_alpha(
cells,
communities_by_cell_QDS$GCFR$family,
region = "GCFR",
focal_scale = "threeQDS"
)
# SWAFR
SWAFR_gamma_beta_alpha_3QDS_species <- compile_gamma_beta_alpha(
cells,
communities_by_cell_QDS$SWAFR$species,
region = "SWAFR",
focal_scale = "threeQDS"
)
SWAFR_gamma_beta_alpha_3QDS_genus <- compile_gamma_beta_alpha(
cells,
communities_by_cell_QDS$SWAFR$genus,
region = "SWAFR",
focal_scale = "threeQDS"
)
SWAFR_gamma_beta_alpha_3QDS_family <- compile_gamma_beta_alpha(
cells,
communities_by_cell_QDS$SWAFR$family,
region = "SWAFR",
focal_scale = "threeQDS"
)
# Merge both regions
gamma_beta_alpha_3QDS_species <- rbind(
cbind(
region = "GCFR",
threeQDS_cell_no = paste0(
"cell_",
levels(as.factor(cells$threeQDS_cell_no[cells$region == "GCFR"]))
),
GCFR_gamma_beta_alpha_3QDS_species
),
cbind(
region = "SWAFR",
threeQDS_cell_no = paste0(
"cell_",
levels(as.factor(cells$threeQDS_cell_no[cells$region == "SWAFR"]))
),
SWAFR_gamma_beta_alpha_3QDS_species
)
)
gamma_beta_alpha_3QDS_genus <- rbind(
cbind(
region = "GCFR",
threeQDS_cell_no = paste0(
"cell_",
levels(as.factor(cells$threeQDS_cell_no[cells$region == "GCFR"]))
),
GCFR_gamma_beta_alpha_3QDS_genus
),
cbind(
region = "SWAFR",
threeQDS_cell_no = paste0(
"cell_",
levels(as.factor(cells$threeQDS_cell_no[cells$region == "SWAFR"]))
),
SWAFR_gamma_beta_alpha_3QDS_genus
)
)
gamma_beta_alpha_3QDS_family <- rbind(
cbind(
region = "GCFR",
threeQDS_cell_no = paste0(
"cell_",
levels(as.factor(cells$threeQDS_cell_no[cells$region == "GCFR"]))
),
GCFR_gamma_beta_alpha_3QDS_family
),
cbind(
region = "SWAFR",
threeQDS_cell_no = paste0(
"cell_",
levels(as.factor(cells$threeQDS_cell_no[cells$region == "SWAFR"]))
),
SWAFR_gamma_beta_alpha_3QDS_family
)
)
gamma_beta_alpha_3QDS <- rbind(
cbind(gamma_beta_alpha_3QDS_species, rank = "species"),
cbind(gamma_beta_alpha_3QDS_genus,   rank = "genus"),
cbind(gamma_beta_alpha_3QDS_family,  rank = "family")
)
# Save to disc
write_csv(
gamma_beta_alpha_HDS,
here::here("analyses/06_outputs/gamma_beta_alpha_3QDS.csv")
)
# Tidy up
rm(
GCFR_gamma_beta_alpha_3QDS_species,
GCFR_gamma_beta_alpha_3QDS_genus,
GCFR_gamma_beta_alpha_3QDS_family,
SWAFR_gamma_beta_alpha_3QDS_species,
SWAFR_gamma_beta_alpha_3QDS_genus,
SWAFR_gamma_beta_alpha_3QDS_family,
gamma_beta_alpha_3QDS_species,
gamma_beta_alpha_3QDS_genus,
gamma_beta_alpha_3QDS_family
)
gamma_beta_alpha_HDS
as_tibble(gamma_beta_alpha_HDS)
as_tibble(gamma_beta_alpha_3QDS)
# Analyse floral species turnover with richness
# (Richness (gamma) ~ mean QDS richness (alpha) * mean QDS turnover (beta))
# Cape vs SWA publication
# Ruan van Mazijk
source(here::here("setup.R"))
source(here::here("analyses/01_import-region-polygons.R"))
source(here::here("analyses/02_import-floral-data.R"))
# HDS richness ~ mean QDS richness * mean QDS turnover -------------------------
# Compile data:
# GCFR
GCFR_gamma_beta_alpha_HDS_species <- compile_gamma_beta_alpha(
cells,
communities_by_cell_QDS$GCFR$species,
region = "GCFR",
focal_scale = "HDS"
)
GCFR_gamma_beta_alpha_HDS_genus <- compile_gamma_beta_alpha(
cells,
communities_by_cell_QDS$GCFR$genus,
region = "GCFR",
focal_scale = "HDS"
)
GCFR_gamma_beta_alpha_HDS_family <- compile_gamma_beta_alpha(
cells,
communities_by_cell_QDS$GCFR$family,
region = "GCFR",
focal_scale = "HDS"
)
# SWAFR
SWAFR_gamma_beta_alpha_HDS_species <- compile_gamma_beta_alpha(
cells,
communities_by_cell_QDS$SWAFR$species,
region = "SWAFR",
focal_scale = "HDS"
)
SWAFR_gamma_beta_alpha_HDS_genus <- compile_gamma_beta_alpha(
cells,
communities_by_cell_QDS$SWAFR$genus,
region = "SWAFR",
focal_scale = "HDS"
)
SWAFR_gamma_beta_alpha_HDS_family <- compile_gamma_beta_alpha(
cells,
communities_by_cell_QDS$SWAFR$family,
region = "SWAFR",
focal_scale = "HDS"
)
# Merge both regions
gamma_beta_alpha_HDS_species <- rbind(
cbind(
region = "GCFR",
HDS_cell_no = paste0(
"cell_",
levels(as.factor(cells$HDS_cell_no[cells$region == "GCFR"]))
),
GCFR_gamma_beta_alpha_HDS_species
),
cbind(
region = "SWAFR",
HDS_cell_no = paste0(
"cell_",
levels(as.factor(cells$HDS_cell_no[cells$region == "SWAFR"]))
),
SWAFR_gamma_beta_alpha_HDS_species
)
)
gamma_beta_alpha_HDS_genus <- rbind(
cbind(
region = "GCFR",
HDS_cell_no = paste0(
"cell_",
levels(as.factor(cells$HDS_cell_no[cells$region == "GCFR"]))
),
GCFR_gamma_beta_alpha_HDS_genus
),
cbind(
region = "SWAFR",
HDS_cell_no = paste0(
"cell_",
levels(as.factor(cells$HDS_cell_no[cells$region == "SWAFR"]))
),
SWAFR_gamma_beta_alpha_HDS_genus
)
)
gamma_beta_alpha_HDS_family <- rbind(
cbind(
region = "GCFR",
HDS_cell_no = paste0(
"cell_",
levels(as.factor(cells$HDS_cell_no[cells$region == "GCFR"]))
),
GCFR_gamma_beta_alpha_HDS_family
),
cbind(
region = "SWAFR",
HDS_cell_no = paste0(
"cell_",
levels(as.factor(cells$HDS_cell_no[cells$region == "SWAFR"]))
),
SWAFR_gamma_beta_alpha_HDS_family
)
)
gamma_beta_alpha_HDS <- rbind(
cbind(gamma_beta_alpha_HDS_species, rank = "species"),
cbind(gamma_beta_alpha_HDS_genus,   rank = "genus"),
cbind(gamma_beta_alpha_HDS_family,  rank = "family")
)
# Save to disc
write_csv(
gamma_beta_alpha_HDS,
here::here("analyses/06_outputs/gamma_beta_alpha_HDS.csv")
)
# Tidy up
rm(
GCFR_gamma_beta_alpha_HDS_species,
GCFR_gamma_beta_alpha_HDS_genus,
GCFR_gamma_beta_alpha_HDS_family,
SWAFR_gamma_beta_alpha_HDS_species,
SWAFR_gamma_beta_alpha_HDS_genus,
SWAFR_gamma_beta_alpha_HDS_family,
gamma_beta_alpha_HDS_species,
gamma_beta_alpha_HDS_genus,
gamma_beta_alpha_HDS_family
)
# 3DS richness ~ mean QDS richness * mean QDS turnover -------------------------
# Compile data:
# GCFR
GCFR_gamma_beta_alpha_3QDS_species <- compile_gamma_beta_alpha(
cells,
communities_by_cell_QDS$GCFR$species,
region = "GCFR",
focal_scale = "threeQDS"
)
GCFR_gamma_beta_alpha_3QDS_genus <- compile_gamma_beta_alpha(
cells,
communities_by_cell_QDS$GCFR$genus,
region = "GCFR",
focal_scale = "threeQDS"
)
GCFR_gamma_beta_alpha_3QDS_family <- compile_gamma_beta_alpha(
cells,
communities_by_cell_QDS$GCFR$family,
region = "GCFR",
focal_scale = "threeQDS"
)
# SWAFR
SWAFR_gamma_beta_alpha_3QDS_species <- compile_gamma_beta_alpha(
cells,
communities_by_cell_QDS$SWAFR$species,
region = "SWAFR",
focal_scale = "threeQDS"
)
SWAFR_gamma_beta_alpha_3QDS_genus <- compile_gamma_beta_alpha(
cells,
communities_by_cell_QDS$SWAFR$genus,
region = "SWAFR",
focal_scale = "threeQDS"
)
SWAFR_gamma_beta_alpha_3QDS_family <- compile_gamma_beta_alpha(
cells,
communities_by_cell_QDS$SWAFR$family,
region = "SWAFR",
focal_scale = "threeQDS"
)
# Merge both regions
gamma_beta_alpha_3QDS_species <- rbind(
cbind(
region = "GCFR",
threeQDS_cell_no = paste0(
"cell_",
levels(as.factor(cells$threeQDS_cell_no[cells$region == "GCFR"]))
),
GCFR_gamma_beta_alpha_3QDS_species
),
cbind(
region = "SWAFR",
threeQDS_cell_no = paste0(
"cell_",
levels(as.factor(cells$threeQDS_cell_no[cells$region == "SWAFR"]))
),
SWAFR_gamma_beta_alpha_3QDS_species
)
)
# Compile data:
# GCFR
GCFR_gamma_beta_alpha_3QDS_species <- compile_gamma_beta_alpha(
cells,
communities_by_cell_QDS$GCFR$species,
region = "GCFR",
focal_scale = "threeQDS"
)
GCFR_gamma_beta_alpha_3QDS_genus <- compile_gamma_beta_alpha(
cells,
communities_by_cell_QDS$GCFR$genus,
region = "GCFR",
focal_scale = "threeQDS"
)
GCFR_gamma_beta_alpha_3QDS_family <- compile_gamma_beta_alpha(
cells,
communities_by_cell_QDS$GCFR$family,
region = "GCFR",
focal_scale = "threeQDS"
)
# SWAFR
SWAFR_gamma_beta_alpha_3QDS_species <- compile_gamma_beta_alpha(
cells,
communities_by_cell_QDS$SWAFR$species,
region = "SWAFR",
focal_scale = "threeQDS"
)
SWAFR_gamma_beta_alpha_3QDS_genus <- compile_gamma_beta_alpha(
cells,
communities_by_cell_QDS$SWAFR$genus,
region = "SWAFR",
focal_scale = "threeQDS"
)
SWAFR_gamma_beta_alpha_3QDS_family <- compile_gamma_beta_alpha(
cells,
communities_by_cell_QDS$SWAFR$family,
region = "SWAFR",
focal_scale = "threeQDS"
)
# Merge both regions
gamma_beta_alpha_3QDS_species <- rbind(
cbind(
region = "GCFR",
threeQDS_cell_no = paste0(
"cell_",
levels(as.factor(cells$threeQDS_cell_no[cells$region == "GCFR"]))
),
GCFR_gamma_beta_alpha_3QDS_species
),
cbind(
region = "SWAFR",
threeQDS_cell_no = paste0(
"cell_",
levels(as.factor(cells$threeQDS_cell_no[cells$region == "SWAFR"]))
),
SWAFR_gamma_beta_alpha_3QDS_species
)
)
gamma_beta_alpha_3QDS_genus <- rbind(
cbind(
region = "GCFR",
threeQDS_cell_no = paste0(
"cell_",
levels(as.factor(cells$threeQDS_cell_no[cells$region == "GCFR"]))
),
GCFR_gamma_beta_alpha_3QDS_genus
),
cbind(
region = "SWAFR",
threeQDS_cell_no = paste0(
"cell_",
levels(as.factor(cells$threeQDS_cell_no[cells$region == "SWAFR"]))
),
SWAFR_gamma_beta_alpha_3QDS_genus
)
)
gamma_beta_alpha_3QDS_family <- rbind(
cbind(
region = "GCFR",
threeQDS_cell_no = paste0(
"cell_",
levels(as.factor(cells$threeQDS_cell_no[cells$region == "GCFR"]))
),
GCFR_gamma_beta_alpha_3QDS_family
),
cbind(
region = "SWAFR",
threeQDS_cell_no = paste0(
"cell_",
levels(as.factor(cells$threeQDS_cell_no[cells$region == "SWAFR"]))
),
SWAFR_gamma_beta_alpha_3QDS_family
)
)
gamma_beta_alpha_3QDS <- rbind(
cbind(gamma_beta_alpha_3QDS_species, rank = "species"),
cbind(gamma_beta_alpha_3QDS_genus,   rank = "genus"),
cbind(gamma_beta_alpha_3QDS_family,  rank = "family")
)
# Save to disc
write_csv(
gamma_beta_alpha_HDS,
here::here("analyses/06_outputs/gamma_beta_alpha_3QDS.csv")
)
# Tidy up
rm(
GCFR_gamma_beta_alpha_3QDS_species,
GCFR_gamma_beta_alpha_3QDS_genus,
GCFR_gamma_beta_alpha_3QDS_family,
SWAFR_gamma_beta_alpha_3QDS_species,
SWAFR_gamma_beta_alpha_3QDS_genus,
SWAFR_gamma_beta_alpha_3QDS_family,
gamma_beta_alpha_3QDS_species,
gamma_beta_alpha_3QDS_genus,
gamma_beta_alpha_3QDS_family
)
# HDS
turnover_richness_HDS_m <- step(lm(
richness ~
log(avg_QDS_richness + 1) + avg_QDS_turnover +
region * log(avg_QDS_richness + 1) +
region * avg_QDS_turnover,
data = gamma_beta_alpha_HDS
))
# Region term retained!
# More evidence for value of region term:
turnover_richness_HDS_m_no_region <- lm(
HDS_richness ~
log(avg_QDS_richness + 1) + avg_QDS_turnover,
data = gamma_beta_alpha
)
# Region term retained!
# More evidence for value of region term:
turnover_richness_HDS_m_no_region <- lm(
HDS_richness ~
log(avg_QDS_richness + 1) + avg_QDS_turnover,
data = gamma_beta_alpha_HDS
)
# Region term retained!
# More evidence for value of region term:
turnover_richness_HDS_m_no_region <- lm(
richness ~
log(avg_QDS_richness + 1) + avg_QDS_turnover,
data = gamma_beta_alpha_HDS
)
HDS_AIC_table <-
AIC(turnover_richness_HDS_m, turnover_richness_HDS_m_no_region)
# 3QDS
turnover_richness_3QDS_m <- step(lm(
richness ~
log(avg_QDS_richness + 1) + avg_QDS_turnover +
region * log(avg_QDS_richness + 1) +
region * avg_QDS_turnover,
data = gamma_beta_alpha_3QDS
))
# Region term retained!
# More evidence for value of region term:
turnover_richness_3QDS_m_no_region <- lm(
richness ~
log(avg_QDS_richness + 1) + avg_QDS_turnover,
data = gamma_beta_alpha_3QDS
)
threeQDS_AIC_table <-
AIC(turnover_richness_3QDS_m, turnover_richness_3QDS_m_no_region)
# Save to disc
write_rds(
turnover_richness_HDS_m,
here::here("analyses/06_outputs/turnover_richness_HDS_m.RDS")
)
write_rds(
turnover_richness_3QDS_m,
here::here("analyses/06_outputs/turnover_richness_3QDS_m.RDS")
)
write_csv(
HDS_AIC_table,
here::here("analyses/06_outputs/HDS_AIC_table.csv")
)
write_csv(
threeQDS_AIC_table,
here::here("analyses/06_outputs/threeQDS_AIC_table.csv")
>>>>>>> b000bf90136c76da7c2249ad3e8376c3f0a5bf0f
)
